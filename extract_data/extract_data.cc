#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <vector>
#include <unistd.h>
#include <fstream>
#include <sstream>
#include <math.h>
#include <stdlib.h>     /* system, NULL, EXIT_FAILURE */

#include "TFile.h"
#include "TH3.h"
#include "TSystem.h"
#include "TTree.h"
#include "TTreeReader.h"
#include "TNtuple.h"

using namespace std;

int main(int argc, char** argv)
{

    //Extract data of a root file generated by bdsim (can go in rebdsim).
    // 1: input.root
    // 2: output.root

    bool extract_by_name; // default value
    bool extract_all;
    string element_name;
    string root_tree;

    if (argc != 4)
    {
        cerr << "Error : no enough arguments" << endl;
        cerr << "./extract_data input.root output.root root_tree" << endl;
        return -1;
    }

    TString input_filename = argv[1];
    TString output_filename = argv[2];
    root_tree = argv[3];

    cout << "Extract all values in the "  << root_tree << " root tree" << endl;
    cout << "Load rebdsim librairies " << endl;
    gSystem->Load("librebdsim.so");
    gSystem->Load("libbdsimRootEvent");

    /// Open the root tree
    TFile *input_file = 0;
    cout << "Open file" << endl;
    input_file = new TFile(input_filename);

    cout << "Get the tree" << endl;
    TTreeReader reader("Event", input_file);

    // Get the desired data (correspond to selection in analysisConfig.txt)
    TTreeReaderValue<vector<Float_t>> elossX(reader, (root_tree+".X").c_str());
    TTreeReaderValue<vector<Float_t>> elossY(reader, (root_tree+".Y").c_str());
    TTreeReaderValue<vector<Float_t>> elossZ(reader, (root_tree+".Z").c_str());
    TTreeReaderValue<vector<Float_t>> elossTime(reader, (root_tree+".T").c_str());
    TTreeReaderValue<vector<Float_t>> elossEne(reader, (root_tree+".preStepKineticEnergy").c_str());
    TTreeReaderValue<vector<Float_t>> elossStepLength(reader, (root_tree+".stepLength").c_str());
    TTreeReaderValue<vector<Float_t>> elossWeight(reader, (root_tree+".weight").c_str());
    TTreeReaderValue<vector<int>> elossParentID(reader, (root_tree+".partID").c_str());



    TTree *tree = (TTree*)input_file->Get("Event"); // initialising the TREE
    int nevents = (Int_t)tree->GetEntries();

    /// Create a file for saving ntuples
    TFile* output_file = 0;
    output_file = new TFile(output_filename,"recreate");
    TNtuple *ntuple = new TNtuple("Data","particle_data","X:Y:Z:T:E:L:PartId:Weight");

    /// Treat the files
    Int_t current_evt=0;

    while (reader.Next())
    {
        vector<Float_t> data_elossX = *elossX;
        vector<Float_t> data_elossY = *elossY;
        vector<Float_t> data_elossZ = *elossZ;
        vector<Float_t> data_elossEne = *elossEne;
        vector<Float_t> data_elossTime = *elossTime;
        vector<Float_t> data_elossStL = *elossStepLength;
        vector<Float_t> data_elossWeight = *elossWeight;
        vector<int> data_elossPartID = *elossParentID;

        int size = data_elossX.size();
        for (unsigned int i =0; i < size; i++)
        {
            /// Extract data
            double xpos = data_elossX[i];
            double ypos = data_elossY[i];
            double zpos = data_elossZ[i];
            double time = data_elossTime[i];
            double energy = data_elossEne[i]*1000; // in MeV
            double steplength = data_elossStL[i]*100; // in cm
            int particle_Id = data_elossPartID[i];
            double weight = data_elossWeight[i];
            ntuple->Fill(xpos,ypos,zpos,time,energy,steplength,particle_Id, weight);
        }
        if(current_evt % (nevents/10) == 0)
        {
            cout <<"Begin treatment of event #" << current_evt << " over " << nevents << endl;
        }
        current_evt++;
    }

    /// Save the TNuples
    output_file->Write();

    delete ntuple;
    cout << "Finish" <<endl;

    return 0;
}
